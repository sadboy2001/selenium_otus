{"uid":"273829c13fccacb4","name":"test_delete_product","fullName":"tests.test_selenium#test_delete_product","historyId":"5c4dab665b87bb0b0eae39f4ab754a8f","time":{"start":1700828152071,"stop":1700828159230,"duration":7159},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1854, -114)\n  (Session info: chrome=119.0.6045.159)\nStacktrace:\n#0 0x56441c4235e3 <unknown>\n#1 0x56441c0e60b7 <unknown>\n#2 0x56441c13bcfc <unknown>\n#3 0x56441c13965f <unknown>\n#4 0x56441c136be4 <unknown>\n#5 0x56441c135934 <unknown>\n#6 0x56441c1281a0 <unknown>\n#7 0x56441c15aef2 <unknown>\n#8 0x56441c127a02 <unknown>\n#9 0x56441c15b0be <unknown>\n#10 0x56441c176b3d <unknown>\n#11 0x56441c15acc3 <unknown>\n#12 0x56441c1260e4 <unknown>\n#13 0x56441c1270ae <unknown>\n#14 0x56441c3e9ce1 <unknown>\n#15 0x56441c3edb7e <unknown>\n#16 0x56441c3d74b5 <unknown>\n#17 0x56441c3ee7d6 <unknown>\n#18 0x56441c3badbf <unknown>\n#19 0x56441c411748 <unknown>\n#20 0x56441c411917 <unknown>\n#21 0x56441c422773 <unknown>\n#22 0x7f7143ff1ac3 <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\")>\n\n    def test_delete_product(driver):\n        driver.get(\"http:/localhost/administration/\")\n        AdminPage(driver).login(\"user\", \"bitnami\")\n        AdminPage(driver).load_page()\n        AdminPage(driver).new_product()\n>       AdminProductPage(driver).delete_last_added_product()\n\ndriver     = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\")>\n\ntests/test_selenium.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/AdminProductPage.py:47: in delete_last_added_product\n    get_header.find_elements(By.TAG_NAME, \"button\")[2].click()\n        get_header = <selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"EAE9CEF3B801D79A11C67D0AC6DC09FD_element_134\")>\n        self       = <page_objects.AdminProductPage.AdminProductPage object at 0x7f749673b7c0>\n        tb         = <selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"EAE9CEF3B801D79A11C67D0AC6DC09FD_element_131\")>\n        tr         = <selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"EAE9CEF3B801D79A11C67D0AC6DC09FD_element_132\")>\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n        self       = <selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"EAE9CEF3B801D79A11C67D0AC6DC09FD_element_137\")>\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n        command    = 'clickElement'\n        params     = {'id': 'EAE9CEF3B801D79A11C67D0AC6DC09FD_element_137'}\n        self       = <selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"EAE9CEF3B801D79A11C67D0AC6DC09FD_element_137\")>\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n        driver_command = 'clickElement'\n        params     = {'id': 'EAE9CEF3B801D79A11C67D0AC6DC09FD_element_137'}\n        response   = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56441c411917 \\\\u003Cunknown>\\\\n#21 0x56441c422773 \\\\u003Cunknown>\\\\n#22 0x7f7143ff1ac3 \\\\u003Cunknown>\\\\n\"}}'}\n        self       = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\")>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f749673beb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56441c411917 \\\\u003Cunknown>\\\\n#21 0x56441c422773 \\\\u003Cunknown>\\\\n#22 0x7f7143ff1ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1854, -114)\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x56441c4235e3 <unknown>\nE       #1 0x56441c0e60b7 <unknown>\nE       #2 0x56441c13bcfc <unknown>\nE       #3 0x56441c13965f <unknown>\nE       #4 0x56441c136be4 <unknown>\nE       #5 0x56441c135934 <unknown>\nE       #6 0x56441c1281a0 <unknown>\nE       #7 0x56441c15aef2 <unknown>\nE       #8 0x56441c127a02 <unknown>\nE       #9 0x56441c15b0be <unknown>\nE       #10 0x56441c176b3d <unknown>\nE       #11 0x56441c15acc3 <unknown>\nE       #12 0x56441c1260e4 <unknown>\nE       #13 0x56441c1270ae <unknown>\nE       #14 0x56441c3e9ce1 <unknown>\nE       #15 0x56441c3edb7e <unknown>\nE       #16 0x56441c3d74b5 <unknown>\nE       #17 0x56441c3ee7d6 <unknown>\nE       #18 0x56441c3badbf <unknown>\nE       #19 0x56441c411748 <unknown>\nE       #20 0x56441c411917 <unknown>\nE       #21 0x56441c422773 <unknown>\nE       #22 0x7f7143ff1ac3 <unknown>\n\ne          = <selenium.webdriver.remote.errorhandler.ErrorCode object at 0x7f749673a290>\nerror_code = 'ELEMENT_CLICK_INTERCEPTED'\nerror_codes = ['ELEMENT_CLICK_INTERCEPTED', 'ELEMENT_IS_NOT_SELECTABLE', 'ELEMENT_NOT_INTERACTABLE', 'ELEMENT_NOT_VISIBLE', 'IME_ENGINE_ACTIVATION_FAILED', 'IME_NOT_AVAILABLE', ...]\nerror_info = [64, 'element click intercepted']\nexception_class = <class 'selenium.common.exceptions.ElementClickInterceptedException'>\njson       = <module 'json' from '/usr/lib/python3.10/json/__init__.py'>\nmessage    = 'element click intercepted: Element is not clickable at point (1854, -114)\\n  (Session info: chrome=119.0.6045.159)'\nresponse   = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56441c411917 \\\\u003Cunknown>\\\\n#21 0x56441c422773 \\\\u003Cunknown>\\\\n#22 0x7f7143ff1ac3 \\\\u003Cunknown>\\\\n\"}}'}\nscreen     = None\nself       = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f749673beb0>\nst_value   = '#0 0x56441c4235e3 <unknown>\\n#1 0x56441c0e60b7 <unknown>\\n#2 0x56441c13bcfc <unknown>\\n#3 0x56441c13965f <unknown>\\n#...9 0x56441c411748 <unknown>\\n#20 0x56441c411917 <unknown>\\n#21 0x56441c422773 <unknown>\\n#22 0x7f7143ff1ac3 <unknown>\\n'\nstacktrace = ['#0 0x56441c4235e3 <unknown>', '#1 0x56441c0e60b7 <unknown>', '#2 0x56441c13bcfc <unknown>', '#3 0x56441c13965f <unknown>', '#4 0x56441c136be4 <unknown>', '#5 0x56441c135934 <unknown>', ...]\nstatus     = 'element click intercepted'\nvalue      = {'error': 'element click intercepted', 'message': 'element click intercepted: Element is not clickable at point (1854,... 0x56441c411748 <unknown>\\n#20 0x56441c411917 <unknown>\\n#21 0x56441c422773 <unknown>\\n#22 0x7f7143ff1ac3 <unknown>\\n'}\nvalue_json = '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element is not clickable at point...>\\\\n#20 0x56441c411917 \\\\u003Cunknown>\\\\n#21 0x56441c422773 \\\\u003Cunknown>\\\\n#22 0x7f7143ff1ac3 \\\\u003Cunknown>\\\\n\"}}'\n\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1700828149921,"stop":1700828152070,"duration":2149},"status":"passed","steps":[],"attachments":[{"uid":"a9146213de977715","name":"6f00c8b1096fa423dd4b1c64bb71e9a9","source":"a9146213de977715.json","type":"application/json","size":822}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1854, -114)\n  (Session info: chrome=119.0.6045.159)\nStacktrace:\n#0 0x56441c4235e3 <unknown>\n#1 0x56441c0e60b7 <unknown>\n#2 0x56441c13bcfc <unknown>\n#3 0x56441c13965f <unknown>\n#4 0x56441c136be4 <unknown>\n#5 0x56441c135934 <unknown>\n#6 0x56441c1281a0 <unknown>\n#7 0x56441c15aef2 <unknown>\n#8 0x56441c127a02 <unknown>\n#9 0x56441c15b0be <unknown>\n#10 0x56441c176b3d <unknown>\n#11 0x56441c15acc3 <unknown>\n#12 0x56441c1260e4 <unknown>\n#13 0x56441c1270ae <unknown>\n#14 0x56441c3e9ce1 <unknown>\n#15 0x56441c3edb7e <unknown>\n#16 0x56441c3d74b5 <unknown>\n#17 0x56441c3ee7d6 <unknown>\n#18 0x56441c3badbf <unknown>\n#19 0x56441c411748 <unknown>\n#20 0x56441c411917 <unknown>\n#21 0x56441c422773 <unknown>\n#22 0x7f7143ff1ac3 <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\")>\n\n    def test_delete_product(driver):\n        driver.get(\"http:/localhost/administration/\")\n        AdminPage(driver).login(\"user\", \"bitnami\")\n        AdminPage(driver).load_page()\n        AdminPage(driver).new_product()\n>       AdminProductPage(driver).delete_last_added_product()\n\ndriver     = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\")>\n\ntests/test_selenium.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/AdminProductPage.py:47: in delete_last_added_product\n    get_header.find_elements(By.TAG_NAME, \"button\")[2].click()\n        get_header = <selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"EAE9CEF3B801D79A11C67D0AC6DC09FD_element_134\")>\n        self       = <page_objects.AdminProductPage.AdminProductPage object at 0x7f749673b7c0>\n        tb         = <selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"EAE9CEF3B801D79A11C67D0AC6DC09FD_element_131\")>\n        tr         = <selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"EAE9CEF3B801D79A11C67D0AC6DC09FD_element_132\")>\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n        self       = <selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"EAE9CEF3B801D79A11C67D0AC6DC09FD_element_137\")>\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n        command    = 'clickElement'\n        params     = {'id': 'EAE9CEF3B801D79A11C67D0AC6DC09FD_element_137'}\n        self       = <selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"EAE9CEF3B801D79A11C67D0AC6DC09FD_element_137\")>\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n        driver_command = 'clickElement'\n        params     = {'id': 'EAE9CEF3B801D79A11C67D0AC6DC09FD_element_137'}\n        response   = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56441c411917 \\\\u003Cunknown>\\\\n#21 0x56441c422773 \\\\u003Cunknown>\\\\n#22 0x7f7143ff1ac3 \\\\u003Cunknown>\\\\n\"}}'}\n        self       = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\")>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f749673beb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56441c411917 \\\\u003Cunknown>\\\\n#21 0x56441c422773 \\\\u003Cunknown>\\\\n#22 0x7f7143ff1ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1854, -114)\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x56441c4235e3 <unknown>\nE       #1 0x56441c0e60b7 <unknown>\nE       #2 0x56441c13bcfc <unknown>\nE       #3 0x56441c13965f <unknown>\nE       #4 0x56441c136be4 <unknown>\nE       #5 0x56441c135934 <unknown>\nE       #6 0x56441c1281a0 <unknown>\nE       #7 0x56441c15aef2 <unknown>\nE       #8 0x56441c127a02 <unknown>\nE       #9 0x56441c15b0be <unknown>\nE       #10 0x56441c176b3d <unknown>\nE       #11 0x56441c15acc3 <unknown>\nE       #12 0x56441c1260e4 <unknown>\nE       #13 0x56441c1270ae <unknown>\nE       #14 0x56441c3e9ce1 <unknown>\nE       #15 0x56441c3edb7e <unknown>\nE       #16 0x56441c3d74b5 <unknown>\nE       #17 0x56441c3ee7d6 <unknown>\nE       #18 0x56441c3badbf <unknown>\nE       #19 0x56441c411748 <unknown>\nE       #20 0x56441c411917 <unknown>\nE       #21 0x56441c422773 <unknown>\nE       #22 0x7f7143ff1ac3 <unknown>\n\ne          = <selenium.webdriver.remote.errorhandler.ErrorCode object at 0x7f749673a290>\nerror_code = 'ELEMENT_CLICK_INTERCEPTED'\nerror_codes = ['ELEMENT_CLICK_INTERCEPTED', 'ELEMENT_IS_NOT_SELECTABLE', 'ELEMENT_NOT_INTERACTABLE', 'ELEMENT_NOT_VISIBLE', 'IME_ENGINE_ACTIVATION_FAILED', 'IME_NOT_AVAILABLE', ...]\nerror_info = [64, 'element click intercepted']\nexception_class = <class 'selenium.common.exceptions.ElementClickInterceptedException'>\njson       = <module 'json' from '/usr/lib/python3.10/json/__init__.py'>\nmessage    = 'element click intercepted: Element is not clickable at point (1854, -114)\\n  (Session info: chrome=119.0.6045.159)'\nresponse   = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56441c411917 \\\\u003Cunknown>\\\\n#21 0x56441c422773 \\\\u003Cunknown>\\\\n#22 0x7f7143ff1ac3 \\\\u003Cunknown>\\\\n\"}}'}\nscreen     = None\nself       = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f749673beb0>\nst_value   = '#0 0x56441c4235e3 <unknown>\\n#1 0x56441c0e60b7 <unknown>\\n#2 0x56441c13bcfc <unknown>\\n#3 0x56441c13965f <unknown>\\n#...9 0x56441c411748 <unknown>\\n#20 0x56441c411917 <unknown>\\n#21 0x56441c422773 <unknown>\\n#22 0x7f7143ff1ac3 <unknown>\\n'\nstacktrace = ['#0 0x56441c4235e3 <unknown>', '#1 0x56441c0e60b7 <unknown>', '#2 0x56441c13bcfc <unknown>', '#3 0x56441c13965f <unknown>', '#4 0x56441c136be4 <unknown>', '#5 0x56441c135934 <unknown>', ...]\nstatus     = 'element click intercepted'\nvalue      = {'error': 'element click intercepted', 'message': 'element click intercepted: Element is not clickable at point (1854,... 0x56441c411748 <unknown>\\n#20 0x56441c411917 <unknown>\\n#21 0x56441c422773 <unknown>\\n#22 0x7f7143ff1ac3 <unknown>\\n'}\nvalue_json = '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element is not clickable at point...>\\\\n#20 0x56441c411917 \\\\u003Cunknown>\\\\n#21 0x56441c422773 \\\\u003Cunknown>\\\\n#22 0x7f7143ff1ac3 \\\\u003Cunknown>\\\\n\"}}'\n\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"_input","time":{"start":1700828152376,"stop":1700828153502,"duration":1126},"status":"passed","steps":[{"name":"click","time":{"start":1700828152376,"stop":1700828153379,"duration":1003},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"BE87DE344F20E36B8CC8D4A3D1651C44_element_37\")>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"BE87DE344F20E36B8CC8D4A3D1651C44_element_37\")>"},{"name":"value","value":"'user'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"_input","time":{"start":1700828153545,"stop":1700828154189,"duration":644},"status":"passed","steps":[{"name":"click","time":{"start":1700828153545,"stop":1700828154035,"duration":490},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"BE87DE344F20E36B8CC8D4A3D1651C44_element_38\")>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"BE87DE344F20E36B8CC8D4A3D1651C44_element_38\")>"},{"name":"value","value":"'bitnami'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"click","time":{"start":1700828154232,"stop":1700828154636,"duration":404},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"6f00c8b1096fa423dd4b1c64bb71e9a9\", element=\"BE87DE344F20E36B8CC8D4A3D1651C44_element_45\")>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"bcd8ffff0671f271","name":"log","source":"bcd8ffff0671f271.txt","type":"text/plain","size":996}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::fin","time":{"start":1700828159597,"stop":1700828159671,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_selenium"},{"name":"host","value":"VDNH-C1"},{"name":"thread","value":"19724-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_selenium"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"273829c13fccacb4.json","parameterValues":[]}