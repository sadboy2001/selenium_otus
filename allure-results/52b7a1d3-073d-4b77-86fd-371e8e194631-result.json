{"name": "test_delete_product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1854, -91)\n  (Session info: chrome=119.0.6045.159)\nStacktrace:\n#0 0x5596823a05e3 <unknown>\n#1 0x5596820630b7 <unknown>\n#2 0x5596820b8cfc <unknown>\n#3 0x5596820b665f <unknown>\n#4 0x5596820b3be4 <unknown>\n#5 0x5596820b2934 <unknown>\n#6 0x5596820a51a0 <unknown>\n#7 0x5596820d7ef2 <unknown>\n#8 0x5596820a4a02 <unknown>\n#9 0x5596820d80be <unknown>\n#10 0x5596820f3b3d <unknown>\n#11 0x5596820d7cc3 <unknown>\n#12 0x5596820a30e4 <unknown>\n#13 0x5596820a40ae <unknown>\n#14 0x559682366ce1 <unknown>\n#15 0x55968236ab7e <unknown>\n#16 0x5596823544b5 <unknown>\n#17 0x55968236b7d6 <unknown>\n#18 0x559682337dbf <unknown>\n#19 0x55968238e748 <unknown>\n#20 0x55968238e917 <unknown>\n#21 0x55968239f773 <unknown>\n#22 0x7ff3d9976ac3 <unknown>", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7f141203eedde727c0a4e1886e45cd71\")>\n\n    def test_delete_product(driver):\n        driver.get(\"http:/localhost/administration/\")\n        AdminPage(driver).login(\"user\", \"bitnami\")\n        AdminPage(driver).load_page()\n        AdminPage(driver).new_product()\n>       AdminProductPage(driver).delete_last_added_product()\n\ndriver     = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7f141203eedde727c0a4e1886e45cd71\")>\n\ntests/test_selenium.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/AdminProductPage.py:47: in delete_last_added_product\n    get_header.find_elements(By.TAG_NAME, \"button\")[2].click()\n        get_header = <selenium.webdriver.remote.webelement.WebElement (session=\"7f141203eedde727c0a4e1886e45cd71\", element=\"4FEBC327E875D5E78BC0076374629F1A_element_130\")>\n        self       = <page_objects.AdminProductPage.AdminProductPage object at 0x7fae547db8e0>\n        tb         = <selenium.webdriver.remote.webelement.WebElement (session=\"7f141203eedde727c0a4e1886e45cd71\", element=\"4FEBC327E875D5E78BC0076374629F1A_element_127\")>\n        tr         = <selenium.webdriver.remote.webelement.WebElement (session=\"7f141203eedde727c0a4e1886e45cd71\", element=\"4FEBC327E875D5E78BC0076374629F1A_element_128\")>\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n        self       = <selenium.webdriver.remote.webelement.WebElement (session=\"7f141203eedde727c0a4e1886e45cd71\", element=\"4FEBC327E875D5E78BC0076374629F1A_element_133\")>\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n        command    = 'clickElement'\n        params     = {'id': '4FEBC327E875D5E78BC0076374629F1A_element_133'}\n        self       = <selenium.webdriver.remote.webelement.WebElement (session=\"7f141203eedde727c0a4e1886e45cd71\", element=\"4FEBC327E875D5E78BC0076374629F1A_element_133\")>\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n        driver_command = 'clickElement'\n        params     = {'id': '4FEBC327E875D5E78BC0076374629F1A_element_133'}\n        response   = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55968238e917 \\\\u003Cunknown>\\\\n#21 0x55968239f773 \\\\u003Cunknown>\\\\n#22 0x7ff3d9976ac3 \\\\u003Cunknown>\\\\n\"}}'}\n        self       = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7f141203eedde727c0a4e1886e45cd71\")>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fae546d3c40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55968238e917 \\\\u003Cunknown>\\\\n#21 0x55968239f773 \\\\u003Cunknown>\\\\n#22 0x7ff3d9976ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1854, -91)\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x5596823a05e3 <unknown>\nE       #1 0x5596820630b7 <unknown>\nE       #2 0x5596820b8cfc <unknown>\nE       #3 0x5596820b665f <unknown>\nE       #4 0x5596820b3be4 <unknown>\nE       #5 0x5596820b2934 <unknown>\nE       #6 0x5596820a51a0 <unknown>\nE       #7 0x5596820d7ef2 <unknown>\nE       #8 0x5596820a4a02 <unknown>\nE       #9 0x5596820d80be <unknown>\nE       #10 0x5596820f3b3d <unknown>\nE       #11 0x5596820d7cc3 <unknown>\nE       #12 0x5596820a30e4 <unknown>\nE       #13 0x5596820a40ae <unknown>\nE       #14 0x559682366ce1 <unknown>\nE       #15 0x55968236ab7e <unknown>\nE       #16 0x5596823544b5 <unknown>\nE       #17 0x55968236b7d6 <unknown>\nE       #18 0x559682337dbf <unknown>\nE       #19 0x55968238e748 <unknown>\nE       #20 0x55968238e917 <unknown>\nE       #21 0x55968239f773 <unknown>\nE       #22 0x7ff3d9976ac3 <unknown>\n\ne          = <selenium.webdriver.remote.errorhandler.ErrorCode object at 0x7fae546d2d40>\nerror_code = 'ELEMENT_CLICK_INTERCEPTED'\nerror_codes = ['ELEMENT_CLICK_INTERCEPTED', 'ELEMENT_IS_NOT_SELECTABLE', 'ELEMENT_NOT_INTERACTABLE', 'ELEMENT_NOT_VISIBLE', 'IME_ENGINE_ACTIVATION_FAILED', 'IME_NOT_AVAILABLE', ...]\nerror_info = [64, 'element click intercepted']\nexception_class = <class 'selenium.common.exceptions.ElementClickInterceptedException'>\njson       = <module 'json' from '/usr/lib/python3.10/json/__init__.py'>\nmessage    = 'element click intercepted: Element is not clickable at point (1854, -91)\\n  (Session info: chrome=119.0.6045.159)'\nresponse   = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55968238e917 \\\\u003Cunknown>\\\\n#21 0x55968239f773 \\\\u003Cunknown>\\\\n#22 0x7ff3d9976ac3 \\\\u003Cunknown>\\\\n\"}}'}\nscreen     = None\nself       = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fae546d3c40>\nst_value   = '#0 0x5596823a05e3 <unknown>\\n#1 0x5596820630b7 <unknown>\\n#2 0x5596820b8cfc <unknown>\\n#3 0x5596820b665f <unknown>\\n#...9 0x55968238e748 <unknown>\\n#20 0x55968238e917 <unknown>\\n#21 0x55968239f773 <unknown>\\n#22 0x7ff3d9976ac3 <unknown>\\n'\nstacktrace = ['#0 0x5596823a05e3 <unknown>', '#1 0x5596820630b7 <unknown>', '#2 0x5596820b8cfc <unknown>', '#3 0x5596820b665f <unknown>', '#4 0x5596820b3be4 <unknown>', '#5 0x5596820b2934 <unknown>', ...]\nstatus     = 'element click intercepted'\nvalue      = {'error': 'element click intercepted', 'message': 'element click intercepted: Element is not clickable at point (1854,... 0x55968238e748 <unknown>\\n#20 0x55968238e917 <unknown>\\n#21 0x55968239f773 <unknown>\\n#22 0x7ff3d9976ac3 <unknown>\\n'}\nvalue_json = '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element is not clickable at point...>\\\\n#20 0x55968238e917 \\\\u003Cunknown>\\\\n#21 0x55968239f773 \\\\u003Cunknown>\\\\n#22 0x7ff3d9976ac3 \\\\u003Cunknown>\\\\n\"}}'\n\n.env/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "_input", "status": "passed", "steps": [{"name": "click", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"7f141203eedde727c0a4e1886e45cd71\", element=\"9615B9A61CA2C1FF288F75B4F2589D53_element_37\")>"}], "start": 1700825821777, "stop": 1700825822721}], "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"7f141203eedde727c0a4e1886e45cd71\", element=\"9615B9A61CA2C1FF288F75B4F2589D53_element_37\")>"}, {"name": "value", "value": "'user'"}], "start": 1700825821777, "stop": 1700825822839}, {"name": "_input", "status": "passed", "steps": [{"name": "click", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"7f141203eedde727c0a4e1886e45cd71\", element=\"9615B9A61CA2C1FF288F75B4F2589D53_element_38\")>"}], "start": 1700825822880, "stop": 1700825823306}], "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"7f141203eedde727c0a4e1886e45cd71\", element=\"9615B9A61CA2C1FF288F75B4F2589D53_element_38\")>"}, {"name": "value", "value": "'bitnami'"}], "start": 1700825822880, "stop": 1700825823425}, {"name": "click", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"7f141203eedde727c0a4e1886e45cd71\", element=\"9615B9A61CA2C1FF288F75B4F2589D53_element_45\")>"}], "start": 1700825823461, "stop": 1700825823875}], "attachments": [{"name": "log", "source": "bbec4d8b-90bc-4fad-b498-a34eb0faf3aa-attachment.txt", "type": "text/plain"}], "start": 1700825821442, "stop": 1700825828403, "uuid": "1787c7b5-a1b8-492b-8cbe-7d71c71defda", "historyId": "5c4dab665b87bb0b0eae39f4ab754a8f", "testCaseId": "5c4dab665b87bb0b0eae39f4ab754a8f", "fullName": "tests.test_selenium#test_delete_product", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_selenium"}, {"name": "host", "value": "VDNH-C1"}, {"name": "thread", "value": "14476-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_selenium"}]}